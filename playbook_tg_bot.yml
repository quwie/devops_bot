- name: Telegram Bot
  hosts: postgres_master, postgres_replication
  become: true
  tasks:
    - name: apt cache update
      apt:
        update_cache: yes
        cache_valid_time: 172800
      become: yes

    - name: git install
      apt:
        name: git
        state: present

    - name: clone TG Bot repository
      git:
        repo: "{{ basic.vars.GIT_URL }}"
        dest: "{{ basic.vars.WORKDIR }}"
        force: yes

    - name: install python3 and additionals
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present

    - name: pip requirements install
      pip:
        requirements: "{{ basic.vars.WORKDIR }}/requirements.txt"

- name: postgresql deployment and preliminary replication setup
  hosts: postgres_master
  become: true
  tasks:
    - name: postgresql install
      apt:
        name:
          - postgresql-14
          - postgresql-contrib
        state: present
        update_cache: true
      register: postgres_install_result

    - name: check installation
      fail:
        msg: "Failed to install PostgreSQL"
      when: postgres_install_result.failed

    - name: postgresql configuration
      become_user: "{{ basic.vars.DB_USER }}"
      blockinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        block: |
          listen_addresses = '*'
          port = {{ basic.vars.DB_PORT }}
          archive_mode = on
          archive_command = 'cp %p /oracle/pg_data/archive/%f'
          max_wal_senders=10
          wal_level=replica
          wal_log_hints = on
          log_replication_commands=on

    - name: make dir /oracle/pg_data/archive
      file:
        path: /oracle/pg_data/archive
        state: directory


    - name: chown oracle archive dir
      file:
        path: /oracle/pg_data/archive/
        owner: "{{ basic.vars.DB_USER }}"
        group: "{{ basic.vars.DB_USER }}"
        recurse: true

    - name: configuring pg_hba.conf
      blockinfile:
        path: "/etc/postgresql/14/main/pg_hba.conf"
        block: |
          local all {{ basic.vars.DB_USER }} peer
          host replication all {{ basic.vars.DB_REPL_HOST }}/24 scram-sha-256
          host all all {{ basic.vars.DB_HOST }}/32 trust

    - name: postgresql restart
      systemd:
        name: postgresql
        state: restarted

    - name: copy init.sql
      copy:
        src: init.sql
        dest: /tmp/init.sql

    - name: change permissions
      file:
        path: /tmp/init.sql
        owner: "{{ basic.vars.DB_USER }}"
        group: "{{ basic.vars.DB_USER }}"
        mode: '0644'

    - name: replace DB_DATABASE with var from env
      replace:
        path: /tmp/init.sql
        regexp: "DB_DATABASE"
        replace: "{{ basic.vars.DB_DATABASE }}"

    - name: replace DB_REPL_USER with var from env
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_USER"
        replace: "{{ basic.vars.DB_REPL_USER }}"

    - name: replace DB_REPL_PASSWORD with var from env
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_PASSWORD"
        replace: "{{ basic.vars.DB_REPL_PASSWORD }}"

    - name: run init.sql
      command: /usr/bin/psql -a -f /tmp/init.sql
      become: true
      become_user: "{{ basic.vars.DB_USER }}"


- name: configuring postgresql replication
  hosts: postgres_replication
  become: true
  tasks:
    - name: install postgresql
      apt:
        name:
          - postgresql-14
          - postgresql-contrib
        state: present
        update_cache: true

    - name: configuring postgresql
      become_user: postgres
      lineinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        regexp: "^#listen_addresses ="
        line: "listen_addresses = '*'"

    - name: postgresql stop
      systemd:
        name: postgresql
        state: stopped

    - name: remove all databases
      command: rm -rf /var/lib/postgresql/14/main/
      become: true
      become_user: "{{ basic.vars.DB_USER }}"

    - name: start replication
      command: pg_basebackup -h {{ basic.vars.DB_HOST }} -D /var/lib/postgresql/14/main/ -p {{ basic.vars.DB_PORT }} -U {{ basic.vars.DB_REPL_USER }} -vP -w
      become: true
      become_user: "{{ basic.vars.DB_USER }}"
      environment:
        PGPASSWORD: "{{ basic.vars.DB_REPL_PASSWORD }}"

    - name: chown dir /var/lib/postgresql
      command: chown -R postgres:postgres /var/lib/postgresql/
      become: true
      become_user: "{{ basic.vars.DB_USER }}"

    - name: start postgresql
      systemd:
        name: postgresql
        state: started

- name: bot playbook
  hosts: postgres_master
  become: yes
  tasks:
    - name: installing python packages
      pip:
        name:
          - python-telegram-bot[all]==13.7
          - paramiko
          - psycopg2-binary
          - python-dotenv
      become: yes

    - name: chown project dir
      command: sudo chown -R {{ basic.hosts.postgres_master.ansible_user }}:{{ basic.hosts.postgres_master.ansible_user }} {{ basic.vars.WORKDIR }}
      become: true
      become_user: "{{ basic.hosts.postgres_master.ansible_user }}"

    - name: create .env
      ansible.builtin.copy:
        dest: "{{ basic.vars.WORKDIR }}/.env"
        content: |
          BOT_TOKEN={{ basic.vars.BOT_TOKEN }}
          DB_HOST={{ basic.vars.DB_HOST }}
          DB_USER={{ basic.vars.DB_USER }}
          DB_PASSWORD={{ basic.vars.DB_PASSWORD }}
          DB_NAME={{ basic.vars.DB_DATABASE }}
          RM_HOST={{ basic.vars.RM_HOST }}
          RM_PORT={{ basic.vars.RM_PORT }}
          RM_USER={{ basic.vars.RM_USER }}
          RM_PASSWORD={{ basic.vars.RM_PASSWORD }}
      become: yes

    - name: start TG bot
      ansible.builtin.shell:
        cmd: python3 {{ basic.vars.WORKDIR }}/bot.py
      become: yes

