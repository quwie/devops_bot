version: '3'

services:
  bot:
    image: 192.168.0.107:5000/tg-bot
    environment:
      BOT_TOKEN: ${TOKEN}
      DB_NAME: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      RM_HOST: ${RM_HOST}
      RM_PORT: ${RM_PORT}
      RM_USER: ${RM_USER}
      RM_PASSWORD: ${RM_PASSWORD}
      DB_REPL_USER: ${DB_REPL_USER}
    depends_on:
      - db_repl
    networks:
      dbnet:
        ipv4_address: 172.20.0.4

  db:
    image: 192.168.0.107:5000/tg-db
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      DB_REPL_HOST: ${DB_REPL_HOST}
      DB_REPL_USER: ${DB_REPL_USER}
      DB_REPL_PASSWORD: ${DB_REPL_PASSWORD}
      RM_USER: ${RM_USER}
      RM_PASSWORD: ${RM_PASSWORD}
      RM_PORT: ${RM_PORT}
    entrypoint:
      - /bin/bash
      - -c
      - |
        echo "Changing password..."
        echo "${RM_USER}:${RM_PASSWORD}" | chpasswd
        echo "Starting SSH service..."
        service ssh start
            echo "Starting PostgreSQL..."
        docker-entrypoint.sh postgres -c listen_addresses='*' \
                                      -c port=${DB_PORT} \
                                      -c logging_collector=on \
                                      -c log_replication_commands=on \
                                      -c log_directory='log/' \
                                      -c log_filename='postgresql.log' \
                                      -c max_wal_senders=10 \
                                      -c wal_level=replica \
                                      -c wal_log_hints=on
    ports:
      - "${DB_PORT}:${DB_PORT}"
    networks:
      dbnet:
        ipv4_address: 172.20.0.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  db_repl:
    image: 192.168.0.107:5000/tg-db_repl
    environment:
      POSTGRES_USER: ${DB_REPL_USER}
      POSTGRES_PASSWORD: ${DB_REPL_PASSWORD}
    command: |
      bash -c "
      su postgres
      rm -rf /var/lib/postgresql/data/*
      export PGPASSWORD=${DB_REPL_PASSWORD}
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot -h ${DB_HOST} -U ${DB_REPL_USER}
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replicate...'
      chown -R postgres:postgres /var/lib/postgresql/data
      chmod 0700 /var/lib/postgresql/data
      su postgres -c 'postgres'
      "
    ports:
      - "5433:5432"
    depends_on:
      db:
        condition: service_healthy
    networks:
      dbnet:
        ipv4_address: 172.20.0.3

networks:
  dbnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
